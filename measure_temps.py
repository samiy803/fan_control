"""
Generated by ChatGPT, run at your own risk
"""
import time
import argparse
import matplotlib.pyplot as plt
import subprocess
import re

# Function to get CPU temperatures
SENSORS_CMD = ["sensors"]

def get_temps():
    """
    Get the temperatures of the CPU. Returns a list of the core temperatures.
    """
    sensors_output = subprocess.check_output(SENSORS_CMD)
    sensors_output = sensors_output.decode('utf-8')
    temps = re.findall(r'Core \d+:\s+\+(\d+.\d)', sensors_output)
    return [float(temp) for temp in temps]

# Parse command-line arguments
def parse_args():
    parser = argparse.ArgumentParser(description="Monitor and save CPU temperature plot.")
    parser.add_argument('--output', type=str, default=None, 
                        help='Output file to save the plot (e.g., "output.png")')
    return parser.parse_args()

# Initialize data for plotting
time_data = []
temp_data = []

start_time = time.time()
max_duration = 5 * 60  # 5 minutes in seconds

# Collect CPU temperature data over time
while True:
    # Get CPU temperatures
    temps = get_temps()
    avg_temp = sum(temps) / len(temps) if temps else 0  # Average temperature

    # Calculate elapsed time
    elapsed_time = time.time() - start_time

    # Store data
    time_data.append(elapsed_time)
    temp_data.append(avg_temp)

    # Break after max_duration (5 minutes)
    if elapsed_time >= max_duration:
        break

    # Wait 1 second before getting the next reading
    time.sleep(1)

# Create the static plot
fig, ax = plt.subplots()
ax.plot(time_data, temp_data, label="Average CPU Temp (°C)", color='red')
ax.set_title("CPU Temperature Over Time")
ax.set_xlabel("Time (s)")
ax.set_ylabel("Temperature (°C)")
ax.legend()
ax.grid()

# Save or show the plot
args = parse_args()

# Save the plot if an output file is specified
if args.output:
    plt.savefig(args.output)  # Save to file
    print(f"Plot saved to {args.output}")
else:
    plt.show()  # Display the plot interactively
